#!/usr/bin/env python3
"""CloakPass copyright 1994 MtxDev.

# version PyQt_2.05b Jan 2022 by MtxDev
# The previous versions were written in Visual Basic.
# cntl alt p turns on the listener.
# Key's are captured upon tab or enter
# the hashed string is output.
# Two command line arguments are input a salt and a key
# This makes each usage unique.
# cntl alt e ends the program
"""
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CloakPassMain.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
import threading
import sys


# import CloakRes_rc
# These are the resources data structures.
# They were created in QtDesigner
# The code from the resource file is at the bottom and is executed
# prior to loading the app
qt_resource_data = b"\
\x00\x00\x1b\xc6\
\x47\
\x49\x46\x38\x39\x61\x5b\x00\x8a\x00\xe6\x7f\x00\x45\x45\x45\x29\
\x29\x29\x86\x86\x86\x59\x59\x59\xa9\xa9\xa9\xd5\xd5\xd5\x9d\x9d\
\x9d\x82\x82\x82\xe2\xe2\xe2\x94\x94\x94\x7c\x7c\x7c\x21\x21\x21\
\x25\x25\x25\x66\x66\x66\x91\x4e\x35\xf1\xf1\xf1\xff\x66\x66\x90\
\x90\x90\xfa\xfa\xfa\xe6\xe6\xe6\xfd\xfd\xfd\xa4\xa4\xa4\x92\x92\
\x92\x84\x84\x84\xb5\xb5\xb5\xb0\xb0\xb0\xb1\x4b\x46\x55\x22\x22\
\xd2\x64\x50\x79\x79\x79\xea\xea\xea\x8c\x8c\x8c\xba\xba\xba\x89\
\x89\x89\x88\x88\x88\xc5\xc5\xc5\xcc\xcc\xcc\xd9\xd9\xd9\x33\x33\
\x33\xdd\xdd\xdd\x1d\x1d\x1d\x78\x78\x78\x18\x18\x18\x64\x64\x64\
\x15\x15\x15\xed\xed\xed\xce\x52\x52\x6a\x6a\x6a\x68\x68\x68\xbd\
\xbd\xbd\x8e\x8e\x8e\x74\x74\x74\x6e\x6e\x6e\x76\x76\x76\x6c\x6c\
\x6c\xf6\xf6\xf6\x72\x72\x72\x10\x10\x10\x61\x61\x61\x5c\x5c\x5c\
\x4c\x4c\x4c\x54\x54\x54\xc0\xc0\xc0\xad\xad\xad\x6f\x2f\x2d\xa1\
\xa1\xa1\x3a\x3a\x3a\x2e\x2e\x2e\x0d\x0d\x0d\x30\x30\x30\x5f\x5f\
\x5f\x36\x36\x36\x70\x70\x70\xf8\xf8\xf8\x3e\x3e\x3e\x28\x28\x04\
\x4a\x4a\x4a\xd1\xd1\xd1\xf4\xf4\xf4\x50\x50\x50\x81\x45\x45\x48\
\x48\x48\x5e\x5e\x5e\x2c\x2c\x2c\x34\x34\x34\xc8\xc8\xc8\x38\x38\
\x38\x41\x41\x41\x3c\x3c\x3c\x56\x56\x56\xe6\x66\x5a\x4e\x4e\x4e\
\x08\x08\x08\x36\x1a\x15\xf6\x66\x62\x43\x43\x43\xca\xca\xca\x69\
\x46\x23\xc3\xc3\xc3\x52\x52\x52\xea\x5e\x5d\x05\x05\x05\x58\x3c\
\x1b\xcf\xcf\xcf\x00\x00\x00\x9b\x9b\x9b\x18\x17\x01\x88\x36\x36\
\x1b\x0c\x0b\xef\x62\x61\xd0\x66\x66\x0f\x0b\x04\x06\x05\x01\x80\
\x80\x80\x7f\x7f\x7f\x97\x97\x97\x99\x99\x99\x81\x81\x81\xfe\xfe\
\xfe\x98\x98\x98\xff\xff\xff\x7e\x7e\x7e\x96\x96\x96\x13\x13\x13\
\x37\x2e\x25\x70\x41\x3f\x9d\x5e\x39\xff\xff\xff\x21\xf9\x04\x01\
\x00\x00\x7f\x00\x2c\x00\x00\x00\x00\x5b\x00\x8a\x00\x40\x07\xff\
\x80\x7f\x82\x83\x84\x85\x86\x87\x88\x89\x85\x76\x8a\x8d\x8e\x8f\
\x90\x90\x78\x08\x56\x2a\x3b\x73\x09\x09\x1f\x03\x26\x3b\x3a\x16\
\x77\x34\x2f\x00\x54\x43\x25\x91\xa8\xa9\xaa\x86\x14\x06\x7b\x5f\
\x38\x11\x11\x34\x77\x1f\x38\x1f\xa1\x0d\x47\x01\x1e\xab\xbe\xbf\
\x8d\x76\x19\x53\x4a\x1d\x09\x07\x29\x1d\x02\x29\x29\x22\x29\x30\
\x16\x0a\x3b\x58\x28\x67\xc0\xd7\xd8\x7f\x18\x2a\x2a\x4a\x4c\x63\
\x3b\x4c\xe2\xe3\x3a\x3c\xe3\x3b\x57\x7b\x58\x08\xd9\xed\x7f\x76\
\x76\x0f\x08\x4d\x67\x2b\x58\x54\x26\x28\x53\x43\x57\x3b\x33\x0a\
\x72\x0e\xc4\x11\x60\xe1\xc0\x01\x01\x7a\x04\xcc\x69\x30\x47\xc0\
\x81\x04\xb7\x04\xc4\x89\xf0\x21\x8e\x82\x06\xe2\xae\x0c\x19\xa2\
\xa2\x08\x0a\x21\x18\x40\x9c\x79\xe0\x44\xc2\x3b\x3c\x76\x24\x94\
\xa4\xe0\xa4\xa5\x93\x1b\x8a\x28\xe0\xa1\x60\xe7\x46\x93\x02\x37\
\x5a\x44\x78\xd1\xe0\x85\x02\x11\x0a\x04\x6c\x1c\xb2\x25\x00\x47\
\x14\x44\xb8\x70\x31\x51\xe1\x06\x89\x1d\x28\x50\xf4\xc0\x20\x01\
\x03\x95\x11\x55\x85\x2c\x58\xa0\x00\x01\x82\x0f\x53\x72\xa0\x58\
\xc0\x43\x86\x8f\x02\x76\x7c\xf8\x98\xf0\xc7\xc3\x08\x1f\x12\xff\
\x1e\x48\xa0\xe9\xee\x0f\x1e\x09\x20\x88\x2c\x50\xaa\x04\x80\x5f\
\x15\x44\x18\x04\xd8\xc3\x05\xc5\x60\x15\x0b\xc6\x12\x09\x10\x60\
\x1f\x17\x34\x01\x88\x0c\xc9\x21\x38\x00\x0b\x06\x2c\xca\xa0\x18\
\x82\x82\xc5\x14\x06\x44\xa6\x2c\x66\x1c\x38\x70\x8e\x32\x20\x28\
\xd4\x1d\x74\x06\x8d\xe4\x00\x5c\x8e\xf4\x4c\xa0\x27\xc1\x8c\x0f\
\x29\x04\x28\xb8\x30\x27\x4e\x87\x03\x3a\x74\x64\x29\x62\x82\xf8\
\x10\x13\x52\x82\x0b\xc0\xd1\xa0\x01\x0c\xde\xc7\x3a\x88\xa8\x61\
\xcb\x82\x2e\x2e\x65\xb2\xf3\x62\xe4\xab\xc4\x13\xca\x3d\xea\xe8\
\xb9\x73\xe7\x80\x82\x3b\x22\x6e\xe3\xc0\x04\x43\x97\x09\x23\x0d\
\xae\xe4\x40\x43\xbf\xbe\xfd\xfb\xf8\xf3\xa3\x61\x61\xc2\x04\x68\
\xe2\x47\xc0\x90\x00\x1d\x34\x44\x30\xc7\x1c\x33\x08\x40\x47\x1e\
\xed\x35\xd7\x40\x0f\xa0\x0d\x50\xc8\x08\x47\xbc\x17\x41\x02\x73\
\xd4\xa0\xdb\x13\x3c\xe0\x20\x02\x50\x4f\x2c\x10\xda\x10\x68\x74\
\xd2\x40\x52\xf9\x01\x01\x81\x06\x44\xe8\x87\x86\x10\x7e\x74\xe1\
\xa2\x6b\x0b\xdc\xf7\xd8\x14\x26\xf0\x80\x85\x10\x3c\x66\x21\x47\
\x1d\xbb\xd9\x30\x40\x00\x0b\x3c\x90\xc8\x03\x03\xa8\x30\x18\xff\
\x0a\x4a\x1c\x31\xc5\x13\x11\x60\x20\x06\x08\x1d\xf0\x40\x62\x7f\
\x57\x1c\xf1\x58\x7e\x6c\xac\x01\x01\x19\x1a\x98\x61\x1f\x00\x1a\
\x70\xa0\x85\x19\x6f\xcc\x58\x06\x0b\x47\xf0\x80\x14\x06\x0a\xcc\
\x90\x45\x88\x9b\xb1\xc0\x02\x13\x3e\xb4\x60\x92\x2f\x06\x70\xa1\
\x02\x03\x3d\x10\x40\x02\x09\x55\x10\xb0\x82\x09\x2b\xa4\x70\x10\
\x0d\x0a\xe8\xa0\x04\x91\xf3\xb9\xc6\x02\x7d\x65\xa8\x60\x1f\x0a\
\x65\x44\xc6\x40\x54\x0b\x08\xa1\x83\x0d\x0a\x44\x50\x47\x07\x0a\
\xd4\x20\xc4\x0b\x69\x90\x90\x86\x12\x0b\x64\xaa\xd7\x1e\x28\xcc\
\x00\xd3\x2f\x37\x8c\x41\x84\x0a\x94\x09\x30\x28\x09\x23\x58\xc0\
\x83\x09\x00\xc5\x21\x47\x02\x02\xc8\x11\x41\x08\x71\x7c\x60\x9e\
\x00\x35\x58\x20\x07\x42\x07\x2c\x34\xc7\x0b\x16\x14\x2b\xec\xb1\
\x71\x08\xab\xad\x00\x1f\xa0\x63\xc0\xae\x06\x5c\x81\x02\x37\xe4\
\x7e\x71\x02\x30\x04\x70\xc3\x00\x15\x71\x60\xb0\xeb\x08\x09\x8c\
\x61\xc2\x01\x2f\x1c\xa0\xc7\x44\x07\xd4\x11\x41\xb1\x14\xe5\x61\
\x9e\x79\x17\x28\x23\x80\x32\xbb\x29\x60\x9e\xbe\xd6\xe6\xc1\x6d\
\x04\x48\x3c\xf1\xc4\xb7\xbb\x06\xd1\x43\x0e\x2a\x70\xb1\x15\xff\
\x17\x06\xac\x86\x87\x5d\x1c\x1b\x22\xc1\x0a\xfb\x44\x61\x03\x0d\
\x03\xfc\xca\xc0\x11\x86\x4c\xa0\xe4\x13\x33\xd0\x50\xc3\x28\x0b\
\x08\xc0\x9d\x20\x1b\x9b\xb4\xe7\x6a\x34\x53\xf0\xc0\x19\x33\x44\
\xb1\x17\x17\x2c\x50\xc1\xe3\xd0\x54\xec\xf0\x02\x0d\x34\x5c\x30\
\x83\x11\x4c\x1c\x21\x04\x0f\x3b\x00\x30\x24\x17\x4a\xbc\x70\x9c\
\x09\x42\x0c\x60\xc4\xd6\x5b\xaf\xd0\x13\x4f\x03\xf0\x58\x84\x52\
\x64\x2b\xc5\x40\x11\x3d\x9c\x30\xd7\xcc\xbf\xe0\xe1\x44\x01\x20\
\xa4\x31\xc3\xdc\x34\x7c\x81\xc4\x11\x2b\x10\x79\xc5\x13\x18\x38\
\xc1\xb6\x3b\x49\x94\x30\xc2\x41\x04\x20\x70\x83\x04\x73\x6d\x8c\
\xf3\x2f\x14\x88\x21\xda\x1e\x01\x30\x11\x83\x1d\x55\x94\x51\x84\
\x0e\x06\xce\xb1\x45\x0e\x57\xb0\xb5\xf8\xe7\x87\x48\x20\xc3\x1e\
\x00\x74\x30\xc7\x07\x33\xc8\x52\xe0\x1d\x33\x34\xa0\x04\x11\x27\
\x28\x0e\xfa\xec\x83\x90\x30\x44\xd5\x79\xe8\xf1\xc1\x1c\xe9\xe1\
\x42\x2d\x0d\xaf\xfb\xf0\x37\xed\x38\x17\xe0\x1f\x0d\x02\xd8\x30\
\xc3\x0b\x1d\xd4\xb0\x43\x03\x1d\x44\x2f\xbd\x0d\x0b\x0c\x71\xc6\
\xf0\xc4\x63\x63\x07\x02\x10\x2a\x91\xc5\x0e\x3c\x84\x3f\x86\xff\
\x11\x56\x1c\xba\x02\x87\x3a\xf4\x20\x44\x16\x00\xb0\x40\xc4\x16\
\x9e\x7f\xfe\x80\x10\x2c\xc0\xca\x4f\x11\x42\xf8\xf5\x44\x03\x38\
\xd0\x30\x77\x02\x17\xf8\x89\xb4\x5e\x50\x83\x04\x4c\xa4\x06\x11\
\x91\x43\x0a\x14\xa0\x2c\x5b\x24\xa0\x06\x30\xe8\x00\x1d\x04\xa0\
\x9b\xdf\x68\x22\x0f\xfa\x92\x05\x45\xe8\x60\x0b\x3d\x84\xa0\x21\
\x13\x9c\x83\x02\x0c\x78\x00\x24\xf4\xaf\x01\x34\x78\x10\x0f\x8e\
\x90\x18\x14\xf0\xe0\x07\x37\x53\x85\x04\x10\xc0\x04\x06\xd8\xd0\
\x04\x7b\x20\x82\x0e\x03\xc3\x82\xcd\x8c\xcb\x86\x45\xe0\x01\x00\
\x16\x90\x83\x00\x98\x80\x46\x00\xe0\x87\x7f\x38\x93\x1d\x1f\x12\
\x61\x0f\x22\xa2\x0c\x03\x4e\x60\x80\x09\xc4\x70\x71\x29\xb1\x43\
\x10\x86\x50\x86\x12\x1d\x87\x0b\x01\x28\x22\x0b\x16\x80\x98\xc4\
\xf4\x87\x01\x90\xcb\x81\x10\xfa\xc3\x46\x13\xb0\xc0\x88\x56\x38\
\x82\xd3\x94\x70\x05\x25\x08\x61\x30\x91\xd9\x48\x17\x77\x70\x33\
\x09\x60\x6f\x15\x12\x30\x80\xa5\x82\x46\x85\x2d\x7c\x80\x06\x16\
\x78\xc1\x42\xf4\xc0\x93\x06\xa0\x2e\x04\x59\x30\x81\xa5\x66\x34\
\x23\x17\x3a\xa8\x39\x03\xc0\x42\x4f\xe8\x70\x07\x9e\x80\x02\xff\
\x07\x57\xa0\x02\x15\x26\xa5\x02\x26\x58\x43\x11\x57\xe0\xc2\x10\
\x0e\x80\x03\x19\x64\x62\x06\x3b\xe0\x4c\x9b\x18\xf8\x82\x1d\x1c\
\x61\x08\xaa\x3c\xce\x0e\x5e\xa7\x1f\x16\xf4\xa1\x0d\x10\xd0\x82\
\x03\xd8\x40\x4c\x2c\x78\x01\x02\xc8\x94\x91\x8b\x88\xa0\x84\x1d\
\x98\x20\x00\x5e\xcc\x4e\x76\x18\x50\x9c\x21\x30\x61\x05\x0a\xa0\
\x83\x08\x5e\x90\x82\x6e\x99\x40\x09\x31\x90\xdd\x1f\x9c\x80\x02\
\x13\x34\x40\x00\x03\x18\xcb\x13\xe8\xb0\x2b\x1f\x64\x60\x57\x55\
\x98\x83\x2d\x9f\xb9\x25\xfb\xa8\xc1\x01\x10\xe0\x80\x98\x28\x49\
\x49\x22\x08\xa1\x01\x18\x50\xcb\xae\x06\xea\x2b\x6e\x30\x21\x0b\
\x42\x18\x02\x0f\x7a\x91\x0a\x0c\x34\xc6\x4e\x52\x78\x27\x09\xc4\
\x60\x3e\x4c\xe2\x92\x9f\xfd\xac\xe7\x62\xbe\xd0\x9c\x1d\x14\x21\
\x00\x29\x20\xc0\x0b\x2c\x23\x96\x37\x36\x06\x0c\xd7\xc0\x43\x02\
\x74\x48\x99\x1a\x08\x6a\x50\x3e\xd8\x02\xa2\x12\x50\x20\x6b\x1d\
\x40\x0e\xd9\x0a\xc1\x05\x4c\xe8\x30\x1e\x3c\x4d\x8e\x5b\x70\xd8\
\x13\x6a\x60\x10\x6c\x09\xeb\x03\x11\x90\x83\x08\xba\xa5\x84\x10\
\x0c\x0a\x03\x34\xd0\x0a\x37\x3e\x43\x84\x23\x9c\xeb\x17\x3e\xff\
\x00\x0d\x60\xac\xf0\x52\x5e\x45\xa0\x3f\x2b\x30\xe0\x0b\x3e\x40\
\x07\x0d\x2d\xd5\x22\x1f\x90\x43\x08\x6c\x31\x8b\x39\x98\xe7\x0e\
\xba\x39\x58\x1e\xb4\xa5\x2d\xb5\x46\x20\x05\xde\x1a\xa8\x2d\xc9\
\x88\x94\x71\x65\x8c\x71\x67\x50\x82\x58\x78\x30\xac\x0a\x44\x20\
\x08\x21\xca\x41\x40\x23\x40\xc4\x30\x2e\xc0\x04\x58\xf8\x82\x64\
\x95\x60\x82\x21\x2c\x80\x9a\xfd\xc9\x81\x09\xca\x30\x05\xcf\xa8\
\xc0\x04\x92\x5d\x23\x11\xc7\xd8\x99\x29\xac\x20\x06\x31\xf8\x41\
\xb7\x02\x50\x84\xc0\x7c\x84\x1d\xd9\x1b\x84\x07\xa2\xb0\x07\x6a\
\xee\x8f\x54\x57\x18\xe3\x1b\x55\x20\x06\x41\xdc\x60\x0f\xc7\x99\
\x42\x11\x06\x40\x03\x24\xbc\x40\x07\xb6\x54\x81\x1c\xae\x08\x3a\
\x09\x08\x20\x88\x0e\xea\x41\x14\x6c\xa9\x04\x23\xc8\x91\x8d\x46\
\x68\x26\x4f\x2e\x90\x00\x8f\x6e\x65\x00\x11\xa8\x00\x6c\x07\x71\
\x83\x02\x3c\xe1\x0a\xe8\xad\xde\x56\x8a\x53\x04\x00\xf4\xa0\x3f\
\x9a\xbc\xa4\xeb\xa4\x20\xdf\x3c\xe8\x60\x33\xa7\x8c\x2d\x2a\x28\
\x40\x82\x89\xa1\x61\x08\x4e\xd0\xef\xe7\x10\xa0\x04\x16\x5c\x21\
\x16\xe8\x2c\x02\x17\x11\xc5\x30\x19\xe0\x00\x00\x39\xa8\x82\xff\
\x80\x3f\x57\x85\x21\x00\x80\x3a\x47\xbb\x03\x86\x0a\x84\x04\x9a\
\x2a\x61\x0f\x18\x50\xcd\x84\x71\x46\x81\x0a\xbc\xc2\x43\x29\x48\
\x24\x1d\x22\x70\x8b\x50\x58\xa1\x08\xe3\x1d\x71\x5d\x6e\x70\x80\
\x57\x20\x21\x02\x16\xa8\x41\x08\x6e\x33\x83\x0f\xd2\x60\x2b\x31\
\x96\x71\x36\x92\x90\x02\x16\xf0\x40\x01\x21\x18\xd8\x07\x12\xd0\
\x80\x10\xd4\x62\x0e\xc0\x0b\x40\x1e\x98\x2b\x64\x5f\x10\x58\x05\
\xe1\x61\xe0\x21\x13\xa0\x0c\x3a\x74\x40\x0f\x0a\xe8\xc0\x0b\xe4\
\x23\xe1\x2a\x63\xa3\x00\xac\xc2\x02\x13\xd0\xab\x03\xa1\xba\xb9\
\xa7\xa2\x45\x42\x12\xcc\x0c\x0c\x87\x62\x16\x6b\x51\x30\x41\x9b\
\xa8\xc0\x03\x3e\x57\xc8\x04\x00\xd0\x4a\x00\x08\x40\x65\x3a\x17\
\x62\x63\x37\x98\x80\x0f\x12\x30\x80\xc7\xf6\x60\x05\x3b\x78\x74\
\x73\x74\xb0\x85\x15\x1c\x99\x07\xf0\x79\x82\x3f\x06\xf0\xbc\xe1\
\x08\x86\x09\xbb\x3a\xc3\x04\x44\x9c\x0d\x46\x24\xa1\x05\x25\x28\
\x40\x01\xaa\xa0\x16\x3a\x3c\x61\x8d\x96\x61\x81\x0a\xa6\x10\x85\
\x5a\x0f\x20\x19\xd1\x7b\x88\x44\x64\x31\x10\x66\x25\x20\x04\x09\
\xc8\x5d\x50\x14\xa0\x87\x02\x85\xc0\x60\x16\xf8\x00\xb3\x90\xff\
\x57\x2d\x60\x23\x23\x82\x0d\xa8\x75\x14\x3a\x63\x27\x23\x2e\xc0\
\x4e\x63\x8c\xf5\x69\x18\x70\x0a\x41\x38\xe1\x05\x4f\x00\x00\xae\
\x18\xb3\x80\x23\x10\x87\x0a\x47\xe8\x81\xba\xd7\xdd\x83\x2c\xa4\
\x20\x0b\x33\x18\x00\xbb\x91\xdb\x03\x1a\xcc\x81\x00\x11\x48\x5f\
\x0f\x74\x60\x00\x10\xe8\xa1\x07\x02\xc0\x80\x01\x7a\xf0\x84\x28\
\x30\x24\x08\x33\x00\xc0\x15\xb6\xa0\x04\x2b\xdc\x91\x55\x0c\xb8\
\xc2\x56\x26\x4e\xf1\x29\x04\xe0\x69\x2b\x28\xdc\x4c\x56\x63\x87\
\x12\xc4\x00\x04\x20\xf8\x40\x14\x54\xb0\x19\x15\xec\x81\x07\x41\
\x50\x0d\x1e\x6a\x36\x87\x22\xa0\x21\x50\xa3\x56\xdc\x03\x66\xe0\
\xa4\xc4\x64\x2d\x06\x1e\xc8\xb9\x9e\xfe\xb8\x38\x3c\x24\xe1\x0c\
\x61\x61\x4c\x64\x24\x53\x98\x1c\x8e\x6b\x2b\xdc\xd8\xc3\x47\xa3\
\xc8\x5a\x1d\x0a\x26\x07\x0b\xb0\x0c\x66\xea\xb4\x26\xa4\x2c\x60\
\x0f\x53\xb0\x1c\x1a\x8a\x40\x19\xce\x95\x80\xe7\xbf\x28\xc1\x10\
\xde\x88\x82\x01\xdc\x61\x5f\x59\x18\x02\x8e\xc2\x82\x86\xea\x29\
\x38\x33\x2c\xb0\x2c\x11\x8a\x00\x1a\x8b\x83\xb1\x45\x60\x1c\x02\
\x11\x34\x43\xae\x31\xe6\xa0\x08\x7b\x31\xc1\x14\x8e\x10\x81\xff\
\x1b\x64\x20\x6f\x49\x61\x40\x02\x48\x5d\x17\x0a\x20\x20\x00\x65\
\x18\x42\x11\xb2\xf3\x4d\x23\xbc\xe0\x05\x0a\xd1\x43\x6f\x76\x23\
\x41\x0d\xef\x04\x09\x74\x18\x50\x02\x42\xb1\x64\x11\xea\xe6\x05\
\xfe\xa2\xe5\x0b\xa4\x30\xb6\x2f\x06\xe0\x01\xe2\x5c\xcd\x04\xe4\
\x03\x1a\xc8\x6e\x12\xca\x16\x68\x65\x82\xe6\xd0\x81\x06\xfc\x0a\
\xf0\xf5\x01\xa3\x7e\x16\x50\x84\x27\x78\x2d\xf5\xcb\xd8\xf1\x1c\
\x76\x32\x07\x18\xc0\x40\x08\x15\x0a\x4c\x11\x64\x60\xa4\x5f\x58\
\xa0\x87\x5b\x70\x50\x07\xc8\xb3\x62\x1a\x24\xe0\x05\x74\x68\x4f\
\x04\xe8\x00\x4a\x2a\xec\x01\xa3\xfc\xfc\xac\xc1\x79\xb0\x98\x1c\
\x80\xff\x0e\x74\xb0\xc1\x2c\x70\x41\x9e\xde\x37\x40\xa6\x44\x04\
\x00\x06\x10\x51\x80\xcc\x6c\x61\x39\x2f\xd0\x34\xfb\x93\x4d\x02\
\xd0\x00\x35\xa0\x07\x3b\xa1\x03\x15\xf2\x5f\x46\x80\x05\x91\xa2\
\x1f\x2a\xe0\x07\x64\x40\x06\x6d\x30\x81\x7e\xf0\x06\x2e\x40\x06\
\xca\x94\x1f\x9a\x45\x4f\x95\x55\x06\x72\xa4\x03\x3c\x71\x79\x2f\
\x00\x03\x4c\x60\x02\x51\x90\x1b\x04\x14\x02\x03\x50\x04\x56\x50\
\x01\xdc\x71\x05\x53\xf0\x29\x2c\x36\x30\xc0\x56\x03\x4c\x80\xff\
\x29\x64\x43\x19\x8b\xc1\x05\x53\xf0\x3c\x97\x51\x4f\xf5\xc1\x02\
\x50\xb0\x22\x6c\x90\x1f\x6f\x40\x06\x10\xb0\x81\xfa\xc1\x05\x3a\
\x04\x1b\x68\xa0\x4a\xa1\x11\x18\x50\x43\x6c\xb5\x11\x30\xbc\x63\
\x04\xa0\xc5\x78\x7f\x80\x00\x15\xd2\x00\xce\x20\x00\xb6\xd4\x00\
\x04\x50\x05\xf0\xe4\x4e\x32\x10\x07\x4f\xd0\x46\x4a\xd1\x45\xf5\
\x71\x4f\x2b\xb2\x04\xe8\x97\x1f\x44\x80\x02\x51\x18\x18\xf4\x31\
\x00\x75\x00\x02\x62\x00\x06\xbc\x32\x70\x26\x60\x05\xe1\x21\x00\
\x59\x70\x71\x5c\x48\x08\x1e\xb0\x17\x59\x40\x5b\x51\x31\x04\x2b\
\x10\x25\x03\x55\x05\x15\xa0\x07\xa1\xa4\x04\x42\x78\x29\x0e\xe0\
\x05\x0e\x30\x87\xf8\xb1\x26\x5b\xd1\x01\x5d\x45\x02\x04\x30\x02\
\x19\x10\x02\x3d\x40\x72\x53\x60\x71\x0c\x80\x05\x06\x70\x88\x87\
\x10\x0f\x04\x00\x06\x37\x80\x07\x05\x70\x04\x0c\xb0\x03\x75\x80\
\x03\xc8\x35\x03\x4f\x40\x4d\x8f\x26\x04\x0c\x70\x89\xf6\xc1\x06\
\x40\xc0\x01\xc8\x74\x8c\x10\x00\x05\x1b\xd0\x05\x6a\x00\x07\x18\
\x05\x82\x2e\x45\x00\x0a\xf0\x28\x4e\xa8\x46\x05\x10\x7b\xab\xe0\
\x03\x83\xf1\x0a\x75\x50\x05\x31\x30\x51\xe6\x63\x2f\x24\x83\xff\
\x05\xa0\xc1\x89\xf7\x71\x6d\x7e\x12\x00\x57\x30\x00\x48\xf0\x01\
\xdd\x72\x04\x03\x90\x2a\x21\xb0\x46\x24\x37\x04\x0c\x50\x31\x06\
\x00\x76\x8f\x00\x06\x8f\xd2\x52\x5d\xe5\x03\x79\x16\x56\x71\x70\
\x00\x18\x74\x53\x71\xd0\x00\x4f\xf0\x05\x01\x10\x15\xe3\x12\x15\
\x24\x27\x49\x0c\x79\x1c\x56\x10\x05\x05\x82\x56\x3f\x72\x01\x16\
\x10\x55\x34\x30\x28\x69\x90\x05\x9d\xd1\x90\xe3\x72\x04\x4d\x00\
\x0c\x12\xb0\x03\xae\xc5\x00\x79\x00\x02\x83\x52\x28\x60\x05\x40\
\x38\xf5\x92\x32\x00\x10\x69\x88\x53\x02\x60\x40\x72\xf0\x92\x77\
\x50\x07\x00\x54\x57\xd9\x22\x2c\x21\x90\x54\xdc\x92\x57\x83\x22\
\x02\x96\xb8\x07\xe4\x52\x55\x57\xe5\x0b\x4d\xc0\x11\xa0\x31\x04\
\xec\x34\x28\xbd\x22\x53\x00\x94\x07\x10\xf1\x01\x1a\x62\x30\x16\
\x11\x01\x02\xb1\x1b\xc1\x06\x24\x06\x61\x2f\xf9\x42\x2c\x0a\x80\
\x04\x07\xf0\x01\x3f\x29\x2c\x75\x90\x07\x33\x70\x05\x10\x43\x02\
\x18\x30\x44\x24\xa7\x24\x9e\x31\x92\xbf\x40\x00\x44\x82\x18\x03\
\x30\x8a\xdf\xd8\x2b\x6b\xe8\x95\x55\x79\x01\x75\x40\x93\x12\xe1\
\x2f\x07\x60\x01\x71\x90\x00\x9c\x17\x40\x0f\x91\x64\x5c\x16\xff\
\x40\xc6\x12\x07\xa9\x97\x07\x42\x49\x02\x06\x40\x07\x00\x40\x04\
\x45\x04\x2b\x2a\xf0\x57\xbe\x90\x2e\x68\xa0\x02\x51\x20\x00\x3e\
\xf0\x2e\x11\x70\x05\x6d\x47\x77\x3c\xa0\x6e\xcf\x30\x03\x79\xa0\
\x54\x1d\x30\x03\x1f\x12\x9b\xb2\x29\x02\x04\x63\x1e\x29\xe0\x35\
\x29\x80\x34\x2f\x20\x5d\xab\x48\x03\x3f\x30\x50\x11\xf0\x05\xb7\
\x32\x04\x01\xa0\x02\x3a\x50\x7d\xc0\x40\x01\x05\xf0\x20\x3a\x10\
\x19\xaa\xc4\x02\x02\x30\x5e\x78\xf0\x00\x09\x10\x00\x0c\xb0\x3f\
\x72\x40\x07\xc7\x46\x03\x82\x61\x45\x7f\x60\x12\x13\x20\x03\x44\
\xd0\x03\x38\x50\x93\x07\x60\x03\x27\xc8\x03\x23\x20\x62\x0f\x00\
\x4d\x3a\xd4\x76\x65\xe0\x70\x34\x70\x06\x85\x96\x3d\x38\xb0\x18\
\x4a\xd0\x17\x81\x46\x44\x9b\x02\x02\xb2\x73\x02\x54\x90\x03\xa2\
\x31\x04\x6d\x66\x05\xfd\x31\x04\x0d\x30\x67\x86\xf6\x9d\x37\x80\
\x00\x22\x10\x07\x6a\xd7\x59\x60\x64\x02\x3d\x80\x79\x09\x10\x01\
\x0a\xb0\x05\x57\x20\x05\x3d\x00\x1b\x58\x90\x00\x38\x32\x00\x0d\
\xf0\x05\x9e\xf2\x01\x55\xc2\x23\x2c\xc4\x05\x7b\x70\x04\x77\x40\
\x01\x88\xf3\x07\xaa\xa1\x8f\xab\x80\x00\x59\xf0\x90\x00\x10\xff\
\x1c\x34\x10\x02\x39\xfa\x02\x99\xd0\x20\x3a\x70\x01\x34\xa0\x03\
\x00\x90\x6e\x2f\xb0\x02\x6d\xb6\x37\x0c\x90\x03\x52\x20\x08\x51\
\x00\x46\x3d\xe0\x09\x57\x30\x06\x52\x00\x00\xfd\x11\x05\x3a\x80\
\x03\x71\x90\x34\x2f\x20\x02\x8e\xa4\x03\x1f\xe0\x48\xc7\x75\x05\
\x6c\xa4\x02\x9c\x85\x52\xa9\x40\x8b\x93\xf7\x59\x80\x16\x1c\xc1\
\xb1\x02\x46\xba\x02\xe6\xe6\x09\x3a\xb0\x02\x43\xaa\x24\x74\x30\
\x8b\xab\xf0\x00\x18\xb0\x02\x0c\xd0\x45\x44\xd0\x46\x26\x20\x4a\
\xf8\x80\x43\x98\x51\x06\x16\x53\x01\xf5\xb9\xa0\x76\x40\x02\x51\
\x47\x07\xd8\xb8\xa0\xab\x60\x07\x14\x30\xa9\x84\x70\x07\xec\xc8\
\x13\x2b\xf0\x61\x3c\x80\x9c\x90\xaa\x0a\x67\x80\x19\x45\x10\xaa\
\x61\x64\x47\x97\xd3\x00\xb9\xc7\x13\x0b\xe0\x03\x9d\xea\x0b\x27\
\x60\x05\x01\x90\x20\x97\x17\x4b\x5d\x34\x53\x05\x02\x4a\x11\xb6\
\xaa\xab\x80\x07\x06\xc0\x02\x51\x20\x41\x32\x70\x1b\x0d\x90\x09\
\xde\xe7\x61\x26\x80\x04\xb3\x82\xab\xa9\x70\x02\xd4\x30\x00\x0d\
\xe1\x7d\x48\x33\x0b\x32\x10\x0a\xaf\xd3\x6d\xc8\xaa\x0a\x20\xf0\
\x0a\xcc\x73\x3a\x33\x20\x2d\xb7\xf1\x63\x0b\x10\x64\xd5\xfa\xff\
\x08\x14\xd0\x01\xd8\x9a\x02\x3b\x66\x0b\xe1\xf7\x40\x30\x20\x22\
\xd4\x1a\xae\x91\x80\x01\xd8\xaa\x00\x73\x10\x02\x35\x20\x2d\x3a\
\x06\x3c\x2a\xd0\xae\xee\xea\x08\x62\xb7\x00\x30\x20\x0b\xcd\x40\
\x1d\xb7\x51\x40\x34\x70\x04\x2c\xa0\xaf\xfb\xaa\x08\x18\x20\x15\
\x72\x80\x7a\x5c\xc6\x64\x33\xd0\x49\x19\xf9\x3a\x1f\x20\xa3\x09\
\x5b\x00\x96\x05\x03\x02\x21\x96\xbc\x93\x02\x77\x60\x0c\x22\x67\
\x02\x4c\x10\x3f\x09\x8b\x08\x4e\x60\x04\x0b\xd0\xab\x18\x2a\x07\
\xf6\x76\x01\x30\xa0\x4d\x0a\xa1\xa3\x64\x56\xb2\x8a\x60\x3c\x96\
\xc0\x2c\x18\x1a\x02\x7a\x10\x40\x21\x24\x02\x14\xa4\x03\x2a\x90\
\x02\xc7\x4a\xb3\x85\x50\x00\x57\x50\x04\xfe\xb0\x03\x4f\x60\x04\
\x51\x30\xa4\xd2\x26\x6d\x46\xf0\x04\xa9\xf8\x01\xae\x48\xb3\x23\
\x70\x8f\x4a\xf0\x04\x03\xd0\x48\x97\x54\x07\x8d\xf4\x68\x00\xb0\
\x07\x4c\xc0\x50\x44\x4b\x08\xdb\xa0\xa6\x80\x9a\xb6\x6d\x84\x75\
\x05\x50\xb6\x85\x10\x04\x0c\xa0\x04\xe1\x93\x9a\xe5\x30\xb7\xe1\
\x73\x3e\x76\x4b\x8e\x5f\x80\x16\x44\x6b\x07\x78\x70\x02\x00\x60\
\x44\x72\x1b\x68\x73\xbb\x05\x3c\x60\xb8\x5b\x70\x04\x51\xb0\xff\
\x05\xf9\x13\x3e\x52\xb5\x03\x55\x40\xb2\x90\xea\x04\x13\x50\x02\
\x4d\x90\x02\x52\x3b\x05\x57\xc0\x04\x03\x20\x07\xa8\xd3\x01\x18\
\xaa\x00\xa2\x2b\xba\xe6\x71\x2f\x0a\xa0\x93\x35\xf0\x0f\x0a\xb0\
\x02\x4c\x40\x05\x8f\x65\x59\x54\x00\x00\x22\xc1\x16\x55\x9b\x0d\
\x3a\x83\x00\x82\x43\x00\x07\xa0\x3e\xfd\x61\x27\x5f\x20\x6d\x8c\
\x92\x34\xda\x89\x03\xa1\x02\x24\xa4\x5b\x30\x01\xf4\x02\x5a\x59\
\x98\xdc\x22\x02\x72\x70\x01\x16\x21\xba\xf1\xd6\xb4\x8c\xc1\x02\
\xc4\xd1\x03\xe0\x95\x01\x20\xc0\x41\x2f\x40\x5c\xf4\x32\x00\xe0\
\xab\x00\x38\x31\x08\x76\xd0\x04\x23\x10\x07\xbc\x7b\x8f\x7b\xb0\
\xbe\x28\x10\xbb\x00\xc0\x03\x9c\xc6\x3c\xbd\xc7\x3b\x08\x71\x6c\
\x07\x31\x57\xc2\x22\x03\xcc\xd2\x41\x14\x34\x30\xf0\x47\x03\x59\
\x99\x2f\x79\x10\x3d\x22\xc0\x41\xa4\x72\x53\x88\xf9\xb1\xd1\x53\
\x4b\xa9\x29\x44\xfa\x13\x6e\x0a\x57\x59\x28\x00\x2b\x64\x8b\x00\
\x51\x31\x36\x2a\xe0\x5e\x3d\x60\x04\x3b\x40\x03\x2c\x4b\xbc\x1e\
\x6c\x03\xf4\xb2\x0c\x03\xd3\xbf\x02\x80\x04\x41\x21\x11\xb9\x51\
\x2d\x79\x90\xa3\x09\x5c\x80\x05\xa4\xa3\x79\x80\x04\x14\x94\xff\
\xa5\xcc\x03\x2a\x1d\xa0\x03\x79\x30\x00\xad\x33\x03\xe4\x39\x37\
\xb0\x54\xa1\x3a\x70\x82\x51\x77\x1c\x5a\x1b\x04\x6d\x5b\x08\x26\
\xd1\x04\x74\x90\xa5\x4f\xc0\x04\x8f\x12\x00\x74\xa4\xb6\x26\x30\
\x71\x74\x47\x9c\xb7\x03\x78\x00\x90\x06\x27\x90\x01\x21\x12\x00\
\x00\x40\x00\x37\x50\x01\x26\x80\x15\x04\x10\x15\x5c\x00\x03\x23\
\x10\x03\x38\xf0\x4c\x13\x6c\x19\x51\xe7\x33\xc4\xb7\x42\x5b\x41\
\xa2\x7e\xe1\x9b\x2d\x20\xa9\xd9\x80\x12\x32\x61\x33\x5d\x88\x01\
\x80\x9c\x00\x46\x20\x04\x39\xc0\x05\xf7\x38\x05\x02\xf0\x75\x27\
\x80\x01\x69\xd0\x04\x14\x30\x01\x29\xc0\x00\x04\xe0\x01\x27\x10\
\x04\x62\x20\x06\x0f\x40\x39\x2f\xb0\x17\x2c\x00\x00\x75\x10\x60\
\x0b\xea\x04\x2d\x50\x00\x71\x70\x47\x36\x64\x43\x3d\x04\x18\x2a\
\x20\x04\x09\x60\x38\x37\x50\x02\x16\x60\x44\x81\x11\x05\x77\x70\
\x06\x89\x56\x02\x20\x5a\x06\xb5\xf5\x19\x97\xc1\x5a\x0c\x30\x04\
\x71\xd0\xb6\x89\xba\x1a\x12\xc0\x58\x3b\x74\x9a\xac\xc5\x18\x63\
\x37\x2e\x24\x57\x06\x3a\xf4\x18\x52\x08\x4d\x93\x71\x87\x86\xba\
\x19\x64\xb4\x90\x26\xc5\x05\x74\xd7\x22\x2d\x32\x05\x07\xe0\xff\
\x01\x16\xeb\x0b\x4e\xb0\x03\x45\x14\x8c\x4a\xf1\x51\x61\x64\x31\
\x70\xbc\x11\x98\x32\x46\x40\x23\x78\x99\xf2\x4c\x2d\x62\x19\x16\
\x33\x76\xb2\xe6\x27\x28\xa0\x14\x73\xf7\x1f\x13\x7a\x77\x28\x00\
\xae\xd8\xf0\x00\x0d\xb0\x17\x92\xc1\x00\x33\xb0\x62\x02\xa0\x03\
\x84\x8c\x06\x28\x50\x04\x15\x93\x8e\x96\xd5\x45\x5c\x20\xa0\x17\
\x55\x04\x76\xa7\x14\x51\x57\x8f\x9d\xd1\x58\x14\xad\x14\x2e\xa4\
\x02\xb8\x24\x22\x0b\x20\x06\xb5\xbb\x0a\x86\xc7\x03\x59\xf0\x01\
\x3e\xb0\xbb\xb0\xa1\x14\x91\x41\x44\xd7\x36\x2e\x95\x42\x46\x22\
\x02\x1b\xb8\xb4\x14\x52\x78\x36\x84\x41\xd3\xf9\x8c\x18\x50\x64\
\xa8\x7a\x37\x04\x59\x20\x62\x12\xf0\x01\x4c\xc0\x03\x7c\xbb\x38\
\x0f\x50\x59\xb8\x44\x22\x7a\x87\x3f\x42\x90\x9f\x4a\x20\x6f\x58\
\xb0\x23\x52\x7d\xa3\x51\x2d\xd5\xd5\x15\x05\x4a\x20\x05\x28\xed\
\x13\x3b\x0b\x03\x3b\x20\x36\x92\x31\x79\x68\x40\x00\x25\xdd\x0e\
\x2d\x70\x99\x59\x57\x06\x7a\x26\x1b\xb6\x81\x0b\x57\x69\x10\x06\
\x63\x0c\x22\x70\x63\xb2\x20\x03\x3a\x20\x03\x2f\x20\x03\x34\x80\
\x3a\x35\x89\x98\x75\x10\x40\xe3\xa1\x3b\x0d\x70\x28\x91\xc7\xff\
\x45\x01\x90\xd4\x24\x56\x00\x5f\x40\x19\x86\x7a\x04\x56\xa0\x48\
\xc5\xe6\x48\x73\x70\x07\x06\x03\x66\x6e\xfa\x04\xa1\x1a\x8c\x59\
\xe7\xd4\xa1\x1a\xaa\x92\x66\x2f\x71\x00\x03\x41\x41\x1d\x38\x40\
\x07\x74\x90\x48\x0d\x60\xa0\x26\x10\x18\x06\xe0\x04\x8f\xea\x0b\
\x88\xd3\x04\x44\x84\x6e\x4a\xb0\x49\x9d\x34\x7a\xf0\xd7\x3a\xcd\
\x71\x82\x76\xd8\x89\x2e\xf7\x5f\x42\xf8\x58\xd9\x67\x30\xcd\x00\
\xac\x9b\xc4\x49\x3c\xd1\x24\x91\x82\x02\x71\xd0\x02\x1d\x83\x0a\
\x12\x20\x02\xa4\x84\x82\xcd\xd1\xad\x2a\x96\xae\xb5\xda\x1c\x0c\
\x60\x8e\xf8\x51\x4e\xd8\xdd\x00\x9c\x80\x35\x8a\xc4\x10\x04\xe2\
\x48\xbe\x9d\x67\xf9\x10\x34\x11\x00\x09\x1d\x40\x3f\x0b\xf0\x04\
\xc2\x22\xaf\xcb\x80\x3a\xb3\x40\x07\x7a\xd0\x1e\x9e\xd2\x1e\xf2\
\xc1\xd0\x93\x02\xde\xf7\x11\x34\xb6\xd8\x83\xa7\x42\x07\x3c\xca\
\x49\x33\xe0\x7c\x02\x70\x07\x07\x12\x07\x6e\x0a\x00\x68\x90\x03\
\x3b\xa0\xa0\x84\x80\x07\x41\x70\x05\x81\x01\x70\x62\x76\x79\xf6\
\x6d\xae\x33\xa0\x07\x89\x04\xa7\x91\x97\x5d\x54\xd0\x22\x94\x04\
\x07\x72\x38\x87\x7b\xf0\x4c\x51\xc8\x45\xb2\xc1\x13\x11\x70\xff\
\x1b\x97\xad\x00\x2b\x74\x04\x4c\x90\x02\x7a\x20\x02\x85\x48\x04\
\x51\x30\x5e\x77\xa0\x04\x0a\x56\x07\xac\xd3\x00\xe2\xb6\x00\x56\
\xf0\x04\x79\x80\x09\x21\x70\x5c\x06\x9a\x1d\xc7\xd1\x80\x28\x7e\
\x1f\x6a\xb0\x04\x7d\x40\x06\xc7\x84\x8c\x5e\xa0\x84\x4b\x38\x23\
\x39\x30\xd5\x90\x17\x79\xd9\xe1\x82\x56\x50\xe6\x15\xb3\x00\x39\
\xae\x79\xb4\xe1\x4d\x56\xc0\x99\x96\x92\x05\x17\x32\x03\x36\xb0\
\x64\x29\x10\x05\x80\xf7\x11\x76\xa4\x77\x59\x37\x79\x97\x23\x04\
\xc2\x48\x1f\x1b\x00\x4c\x2e\xc0\x06\x69\x42\x29\x6c\xe0\x07\xc7\
\xc4\x84\xf8\xc1\x4c\xb1\xe4\x83\x96\x33\x14\x3c\x44\x16\xa3\xab\
\x1b\x02\x30\x03\x07\xd0\x5a\x3a\x40\x08\x79\xe6\x29\x2c\x66\x95\
\xc5\xf2\x02\x3c\x60\xd1\xa9\x58\xd3\xaa\x54\x22\x9e\xb2\x18\x53\
\x5e\x1f\x40\xd0\x06\x6e\xc0\x04\x2e\xa2\x84\x8a\xee\x22\x5b\x12\
\x19\xb2\xcc\x00\x59\xd0\x13\x02\x00\x98\x01\xf3\x01\x3a\xc0\x11\
\x09\xb0\x08\x42\x50\x55\xb4\x29\x03\x35\x60\x03\x4f\xb0\x05\x2e\
\x75\xc9\x3e\xf0\x03\x0a\xd0\x6e\x57\x52\xd5\x53\x60\x31\xa9\x8e\
\x06\x2a\xa2\x01\x6a\x20\xeb\x6c\xe0\x8c\x2e\x52\x06\xe5\x5c\xff\
\x1f\x8c\xa1\x0c\x3f\x80\x01\x09\xb0\x86\x82\x48\x95\xe8\x94\x3f\
\xbd\x65\x08\x78\x00\x61\x3d\x80\x3a\x34\x70\x82\x3d\xd0\x96\xbb\
\x02\x06\x3e\x10\x03\x1f\xc0\x46\x0f\x68\x4f\xf8\xa4\x01\x2b\x2e\
\xe0\x86\x9a\x77\x52\x10\x3d\x01\x35\x50\x24\xf0\x03\x50\x81\x02\
\x4c\xb0\x7a\x43\xb0\x07\x99\x9e\x08\x0a\xf0\x59\xe8\x0b\x2b\x42\
\x80\x03\xee\x42\x28\x62\x00\x4f\x0b\x71\x04\x35\x9a\x1f\x70\x60\
\x06\x1c\xc0\x01\x61\x20\xe0\xf4\x51\x87\x44\xf0\x05\x7a\x40\xf0\
\x03\x35\x07\x8f\x62\x50\xbd\x58\x04\x67\x30\xdb\x83\x50\x43\xd0\
\xa7\x99\x86\x7c\xa3\x1f\xf0\x4e\x23\x90\x06\x4c\x60\x44\x14\x1a\
\xed\xf9\x51\x06\x2a\x42\x06\x6b\xa0\x1f\x61\x10\x06\x7c\xf0\xe7\
\x94\x02\x39\x3c\xd0\x1b\x3b\x50\x01\x04\x90\x06\x15\x60\x00\xe9\
\x34\x2e\x3a\xb4\xca\x84\x06\x09\x08\xd0\x3e\x28\x60\x03\x70\x62\
\x02\x5b\x90\x00\x3e\x60\x00\x33\x40\x59\x57\x42\xa1\x56\x80\xf4\
\x68\xd0\x25\x10\xe0\x05\x1c\xa0\x01\x6e\xaf\x01\x6e\x80\x4c\xfa\
\x54\xe8\xdb\x9e\x03\x45\x64\x03\x55\x90\x01\xc1\x49\xa6\x8f\x15\
\x00\x0d\xe0\x01\x69\x8d\x08\x74\xf1\x07\x27\x30\x6d\x88\x61\xff\
\x02\x35\xf0\x03\x20\x50\x01\xef\xe5\x35\x61\x33\xed\xf7\xf1\x06\
\x5d\xb0\x01\x94\x5f\xf9\xe7\x67\x1f\xee\x63\x1f\x92\xe1\x17\x4a\
\x80\x29\xb2\x51\x03\x29\xb0\x42\x24\x57\xd3\x49\x7c\x0d\xdb\x60\
\x94\x47\x50\x07\xa4\x08\x8e\x88\xd2\x00\xe7\xa9\x04\xc1\x28\xf2\
\xf4\xe1\x3e\x7b\x60\xf7\x52\x4c\x5c\x72\xe0\x4c\x58\x90\x2a\x23\
\xb5\x15\xa9\x4c\x24\x31\x90\x0d\x04\x90\x18\x27\x77\x07\xbb\x42\
\x51\x33\x95\x07\x60\xf3\x28\x90\x3f\x23\x15\x83\x18\x15\x53\x44\
\x57\x00\x3d\x35\xc0\x41\x63\x8d\x2a\xaa\xa2\x04\x64\xba\x90\xdb\
\xa8\x00\x81\xdf\x08\x4e\x80\x03\x85\x3c\x05\x30\xf0\x52\x79\x6f\
\x3e\xe2\x31\x90\x2d\x6c\x03\xe8\xb0\x90\x84\x91\x14\x64\xda\x43\
\x0c\xdd\x19\xdc\xbe\x19\x50\x07\x00\x00\xec\xb9\x32\x90\x07\x17\
\x00\x08\x21\x02\x42\x34\x20\x24\x69\x4a\x26\x0b\x2a\x28\x2a\x5c\
\x28\x4c\x25\x7f\x93\x94\x95\x96\x97\x93\x20\x0c\x2a\x44\x0c\x35\
\x04\x24\xa1\x31\x26\x26\x2b\x09\x34\x11\x38\x1f\x02\x34\x17\x0a\
\x33\x29\x3a\x4f\x00\x43\x0b\x43\x8c\x2a\x8c\x45\xa4\x4c\x4f\x46\
\x29\x11\x21\x72\x71\x72\x1f\x21\x33\x1f\x3b\x84\xa1\x69\x2f\xff\
\x0c\x65\x01\x44\x0b\x0b\x5c\x47\x27\x98\xd8\x98\x12\x3b\x9d\x28\
\x9e\xa0\x24\x55\x04\x4c\xa5\xa7\x11\x17\xc4\x11\x1f\x72\xc3\xed\
\x75\x0a\x2f\x75\x79\x0d\x75\xf5\xf5\x72\x16\x02\x11\xaf\xc3\x21\
\x11\x71\x02\x92\x5d\x31\x10\x8a\x04\x12\x21\x8d\x54\x4c\xa1\x66\
\x2d\x9b\x43\x4a\xdb\x88\xa8\xc8\xc1\x40\x40\x41\x71\x3c\x4c\x28\
\x88\xa3\x87\xc6\x2a\x62\xc4\x3e\xc8\x00\x29\x47\x40\x02\x39\x07\
\xe6\x34\x98\xf3\xc2\x02\xba\x76\x71\x46\x2a\xf8\x57\x52\x20\xc1\
\x50\x06\xae\x70\xd9\x93\x2b\xd7\x97\x6b\x0f\x1d\x22\x10\x22\x31\
\xc7\x10\x3d\x05\x47\x58\x20\xa7\xa0\x63\x04\x01\xc3\xd4\xb1\x8b\
\xe3\x4f\x4e\x9d\x38\x79\xe4\xc9\xbb\x53\xe7\xd4\xc7\x7b\xfd\x04\
\xd4\xb0\x10\x07\xc7\xc0\x82\x39\x4d\x74\xca\xb1\x80\x45\xc3\xa0\
\xd9\x9a\xdc\x0a\x60\x34\x41\xd2\x08\xa4\xe4\x28\x38\x70\x20\x4f\
\x84\x1a\x02\xf6\xc6\x51\x70\x81\x86\x49\x11\x09\x0e\xc8\x51\xa9\
\x60\x6f\x02\x55\xfe\xf6\xca\xf8\x70\xa1\x43\x84\x3c\x0a\x76\x9c\
\x2d\x18\x05\xc5\x14\x69\x9b\x54\x60\x80\x9b\x8d\x40\xdb\x5c\x00\
\xc0\x91\x50\x1a\xc5\x44\x8a\x03\x7a\xe2\x1c\x48\x00\xf8\x43\xff\
\x30\x11\x11\xe4\x1d\xd8\xcb\xfb\xc2\x9d\x96\x71\x2c\x1c\x88\xd0\
\xc1\x55\x31\xab\x79\x42\xd8\x2c\x08\xe2\xc0\x15\x22\x2c\x1c\x35\
\x32\x40\x1a\x1b\x01\x47\x2a\x86\x34\x20\x20\x06\xc3\x6a\x0b\x00\
\x4c\xd4\x70\xf5\xf8\xc3\x87\x3c\x1f\x14\xd0\xe8\x90\x55\xc1\x87\
\x04\x21\xf4\xb8\xa2\x03\xc3\x1c\x8e\x19\x7d\xd3\xa3\x74\x7f\xe0\
\x43\x03\xcd\x37\x91\x90\x81\x01\x00\x74\xb2\x09\x0a\x44\x50\x57\
\xdd\x25\xd7\xe5\x10\x40\x14\x1f\x14\xb4\x1a\x5e\x0b\x8c\xd1\x43\
\x0f\x79\x08\x60\x52\x71\x74\x08\x62\x41\x1d\xc3\xc5\x91\x40\x53\
\x29\xa4\x70\x87\x02\x09\xf8\x55\xc7\x39\x2b\x0a\x53\x07\x0e\x48\
\x1c\xd0\x00\x16\x34\x04\x48\x42\x10\x3a\xb0\x40\xc4\x1e\x01\x04\
\xb0\xc0\x68\x0b\x5a\x72\xc6\x11\x5c\xe4\x60\x05\x0d\x15\xf8\x50\
\x85\x0f\x62\x5c\x30\x06\x1a\x0b\x5c\xa1\xc2\x34\x43\x5c\x21\x44\
\x14\x5f\x00\x90\xc5\x96\x5c\x72\xd9\x03\x00\x3d\x44\x71\xc4\x15\
\x63\x0a\x41\x0a\x29\x42\x1c\x31\x0d\x27\x58\xcc\x50\x50\x0c\x3f\
\xe8\x40\x14\x11\x8d\x44\x31\x41\x90\xd8\x94\xc0\xc3\x10\x01\x28\
\x11\x26\x0f\x4f\x2c\xb0\x47\x0f\x76\x4c\x82\xc1\x00\x42\xb0\xff\
\x85\x45\x16\x34\xcc\x40\x83\x14\x51\x30\x50\x0d\x7e\x33\x08\x30\
\x00\x0b\x0b\x60\x71\x05\x0f\x2f\xd8\xd0\x00\x39\x26\x00\x10\x41\
\x0c\x19\xe8\xb0\xc7\x10\x36\xbc\x10\x45\x16\x01\xec\xd1\x96\x12\
\x29\x80\x21\x01\x9e\x41\x3d\x10\x07\x0d\x51\xc8\x71\x87\x36\x2b\
\x98\xc0\x84\x0e\x72\x24\xf0\x41\x07\x3c\x30\x70\xc4\x25\x12\xa0\
\x10\x45\x1c\xc5\x8d\xc8\xc4\x14\x04\x54\x72\xc3\x0c\x5f\xac\x77\
\x84\x12\x4a\x10\xf0\x00\x1e\xb4\x76\x8b\x8d\x07\x4f\x60\x7a\xa6\
\x09\x43\x4c\xc1\x40\x11\x14\x54\x62\xc7\x03\x28\xf4\x58\x44\x16\
\xe1\x91\x92\xc5\x09\xdc\x7a\x6b\x2f\x69\x78\xdc\x60\x05\x17\x4a\
\xe8\xd0\x00\x4a\x3c\xa0\x80\x29\x17\x0b\x3c\x40\x89\x5a\x43\x98\
\xc0\x02\x0f\x07\xcc\xb0\x05\xb6\x0b\xbc\x75\xef\xc4\x94\xe0\x41\
\x01\x05\x37\x4c\xe0\x04\x13\x5c\x30\x60\x82\x10\x3d\xbc\x40\x03\
\x0d\x03\x04\xa0\x02\x16\x45\xe4\xa0\xc4\x0d\x12\x50\xf1\x31\x16\
\x3c\x0e\x10\xc2\x63\xf1\xa2\x90\xc3\x0e\x1e\xa4\x4b\x71\x75\x76\
\x50\x20\x81\x13\x13\x20\xd0\x03\x29\x45\x70\x61\x34\x17\x5f\x0a\
\x21\xc4\x00\x07\x58\xd0\x81\x11\x3c\x1c\x61\xc5\x11\x42\x04\xff\
\xc0\x85\x10\x1f\x70\xb1\xcb\x00\x0d\x34\x20\x80\x05\x35\x74\xdd\
\xc0\x18\x4a\x5b\xbd\x87\x10\x59\x74\xe0\xc4\x0f\x4e\x80\xf0\x80\
\x07\x2c\xd7\x7b\x2f\x1e\x08\x0c\xa0\x42\x19\x5c\x48\x74\xa5\x11\
\x00\x34\x60\x83\xa7\x0d\x28\x21\xc5\x7b\x09\xcc\x00\x00\xd5\x3c\
\x34\x30\x43\x1d\x2b\xf4\xc0\x00\x0b\x06\x9c\xc1\xc5\x14\x26\x18\
\x61\xe5\x11\x54\x1f\xc1\x83\x0e\x29\xc4\x01\xc3\x0b\x9f\x1b\xa1\
\x84\x10\xa3\x97\xce\xc2\x10\x47\xb0\x50\x86\x10\x6e\x4b\x50\x28\
\x9e\x69\x4c\x89\x39\xe6\x54\x7c\xa1\xc3\x00\xfd\xea\xa0\xbb\xbf\
\x58\xcc\x8e\xb6\x1c\xc4\x16\x71\x84\xd5\x2a\xec\x00\xd4\x1f\x51\
\xec\x51\x06\x34\x26\x14\xc1\x02\x0a\xbb\x90\x82\x39\x29\x54\xcc\
\x3e\xfb\x0e\x4a\x58\x9f\x39\x0a\x34\xc8\x4d\x9a\x07\x3b\xb0\x40\
\x85\x0e\x2b\x94\x3f\x43\x08\x62\x37\xb0\xc2\x11\xa4\x18\xd1\xf5\
\x31\x2b\x00\xc0\xc8\x13\x05\x3c\x24\x37\xb7\x2d\x0c\xb2\x48\xf3\
\x45\x14\x81\x45\xf9\x00\x0c\xe0\xee\x74\x20\x3f\x14\x64\xa0\x5b\
\x4e\xb0\x80\x12\xa6\xb6\x80\xe5\x95\x81\x08\x54\x28\x42\x19\x5c\
\x56\x86\xcf\x10\x21\x00\x38\xb0\x40\x05\x26\xf0\x3a\x6f\xd9\x23\
\x61\x02\x1f\xb8\xdc\x11\xa8\x40\x05\x2b\x80\x09\x51\x63\x98\xc1\
\x0c\x70\x40\x07\x12\xdc\x60\x67\x70\xf1\x1e\x0c\xd5\x45\x09\x9d\
\x75\x2b\x10\x00\x3b\
"

qt_resource_name = b"\
\x00\x05\
\x00\x4f\xa6\x53\
\x00\x49\
\x00\x63\x00\x6f\x00\x6e\x00\x73\
\x00\x0c\
\x0e\x47\xfd\xb6\
\x00\x63\
\x00\x6c\x00\x6f\x00\x61\x00\x6b\x00\x6d\x00\x61\x00\x6e\x00\x2e\x00\x67\x00\x69\x00\x66\
"

qt_resource_struct_v1 = b"\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\
\x00\x00\x00\x10\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\
"

qt_resource_struct_v2 = b"\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\
\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x02\
\x00\x00\x00\x00\x00\x00\x00\x00\
\x00\x00\x00\x10\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\
\x00\x00\x01\x7e\x1d\xef\x12\xe2\
"

# End of QtDesigner resource file import

# Begining of the QtDesigner Ui File also imported below
# from PyQt5 import QtCore, QtGui, QtWidgets
# moved to top of file


class Ui_CloakPassMain(object):
    """Create and manage the UI included from Qt Designer."""

    def setupUi(self, CloakPassMain):
        """Place all the controls on the GUI. Created by QtDesigner."""
        CloakPassMain.setObjectName("CloakPassMain")
        CloakPassMain.resize(435, 498)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/cloakman.gif"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        CloakPassMain.setWindowIcon(icon)
        CloakPassMain.setLocale(QtCore.QLocale(QtCore.QLocale.English,
                                               QtCore.QLocale.UnitedStates))
        self.lblTitle = QtWidgets.QLabel(CloakPassMain)
        self.lblTitle.setGeometry(QtCore.QRect(70, 10, 281, 21))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.lblTitle.setFont(font)
        self.lblTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.lblTitle.setObjectName("lblTitle")
        self.layoutWidget = QtWidgets.QWidget(CloakPassMain)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 0, 2, 2))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.layoutWidget1 = QtWidgets.QWidget(CloakPassMain)
        self.layoutWidget1.setGeometry(QtCore.QRect(30, 240, 361, 151))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.groupBox = QtWidgets.QGroupBox(self.layoutWidget1)
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget2.setGeometry(QtCore.QRect(10, 24, 157, 121))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.cbSpcChar = QtWidgets.QCheckBox(self.layoutWidget2)
        self.cbSpcChar.setObjectName("cbSpcChar")
        self.verticalLayout_3.addWidget(self.cbSpcChar)
        self.cbNums = QtWidgets.QCheckBox(self.layoutWidget2)
        self.cbNums.setObjectName("cbNums")
        self.verticalLayout_3.addWidget(self.cbNums)
        self.cbCaps = QtWidgets.QCheckBox(self.layoutWidget2)
        self.cbCaps.setObjectName("cbCaps")
        self.verticalLayout_3.addWidget(self.cbCaps)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.sBPassLen = QtWidgets.QSpinBox(self.layoutWidget2)
        self.sBPassLen.setMinimum(4)
        self.sBPassLen.setProperty("value", 12)
        self.sBPassLen.setObjectName("sBPassLen")
        self.horizontalLayout_2.addWidget(self.sBPassLen)
        self.lblPassLen = QtWidgets.QLabel(self.layoutWidget2)
        self.lblPassLen.setObjectName("lblPassLen")
        self.horizontalLayout_2.addWidget(self.lblPassLen)
        self.verticalLayout_4.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3.addWidget(self.groupBox)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.gBPassStar = QtWidgets.QGroupBox(self.layoutWidget1)
        self.gBPassStar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.gBPassStar.setAlignment(QtCore.Qt.AlignLeading
                                     | QtCore.Qt.AlignLeft
                                     | QtCore.Qt.AlignVCenter)
        self.gBPassStar.setObjectName("gBPassStar")
        self.layoutWidget3 = QtWidgets.QWidget(self.gBPassStar)
        self.layoutWidget3.setGeometry(QtCore.QRect(10, 26, 141, 81))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.rBNoShow = QtWidgets.QRadioButton(self.layoutWidget3)
        self.rBNoShow.setObjectName("rBNoShow")
        self.verticalLayout_5.addWidget(self.rBNoShow)
        self.rBShowPass = QtWidgets.QRadioButton(self.layoutWidget3)
        self.rBShowPass.setObjectName("rBShowPass")
        self.verticalLayout_5.addWidget(self.rBShowPass)
        self.rBShowStars = QtWidgets.QRadioButton(self.layoutWidget3)
        self.rBShowStars.setObjectName("rBShowStars")
        self.verticalLayout_5.addWidget(self.rBShowStars)
        self.verticalLayout_7.addWidget(self.gBPassStar)
        self.pBApply = QtWidgets.QPushButton(self.layoutWidget1)
        self.pBApply.setObjectName("pBApply")
        self.verticalLayout_7.addWidget(self.pBApply)
        self.horizontalLayout_3.addLayout(self.verticalLayout_7)
        self.layoutWidget4 = QtWidgets.QWidget(CloakPassMain)
        self.layoutWidget4.setGeometry(QtCore.QRect(70, 410, 269, 30))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pBStart = QtWidgets.QPushButton(self.layoutWidget4)
        self.pBStart.setObjectName("pBStart")
        self.horizontalLayout_4.addWidget(self.pBStart)
        self.pBStop = QtWidgets.QPushButton(self.layoutWidget4)
        self.pBStop.setObjectName("pBStop")
        self.horizontalLayout_4.addWidget(self.pBStop)
        self.btnMinimize = QtWidgets.QPushButton(CloakPassMain)
        self.btnMinimize.setGeometry(QtCore.QRect(90, 450, 90, 28))
        self.btnMinimize.setObjectName("btnMinimize")
        self.btnExit = QtWidgets.QPushButton(CloakPassMain)
        self.btnExit.setGeometry(QtCore.QRect(230, 450, 90, 28))
        self.btnExit.setObjectName("btnExit")
        self.layoutWidget5 = QtWidgets.QWidget(CloakPassMain)
        self.layoutWidget5.setGeometry(QtCore.QRect(10, 92, 411, 141))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget5)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lblSalt = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.lblSalt.setFont(font)
        self.lblSalt.setObjectName("lblSalt")
        self.horizontalLayout.addWidget(self.lblSalt)
        self.leSalt = QtWidgets.QLineEdit(self.layoutWidget5)
        self.leSalt.setObjectName("leSalt")
        self.horizontalLayout.addWidget(self.leSalt)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.lblKey = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.lblKey.setFont(font)
        self.lblKey.setObjectName("lblKey")
        self.horizontalLayout_5.addWidget(self.lblKey)
        self.leKey = QtWidgets.QLineEdit(self.layoutWidget5)
        self.leKey.setObjectName("leKey")
        self.horizontalLayout_5.addWidget(self.leKey)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lblPW = QtWidgets.QLabel(self.layoutWidget5)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setItalic(True)
        self.lblPW.setFont(font)
        self.lblPW.setObjectName("lblPW")
        self.horizontalLayout_6.addWidget(self.lblPW)
        self.lePass = QtWidgets.QLineEdit(self.layoutWidget5)
        self.lePass.setObjectName("lePass")
        self.horizontalLayout_6.addWidget(self.lePass)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.lblIcon = QtWidgets.QLabel(CloakPassMain)
        self.lblIcon.setGeometry(QtCore.QRect(20, 10, 52, 79))
        self.lblIcon.setText("")
        self.lblIcon.setPixmap(QtGui.QPixmap(":/Icons/cloakman.gif"))
        self.lblIcon.setScaledContents(True)
        self.lblIcon.setObjectName("lblIcon")
        self.lblInstructions = QtWidgets.QLabel(CloakPassMain)
        self.lblInstructions.setGeometry(QtCore.QRect(100, 40, 121, 51))
        self.lblInstructions.setWordWrap(True)
        self.lblInstructions.setObjectName("lblInstructions")
        self.lblstatus = QtWidgets.QLabel(CloakPassMain)
        self.lblstatus.setGeometry(QtCore.QRect(310, 60, 38, 16))
        self.lblstatus.setAlignment(QtCore.Qt.AlignCenter)
        self.lblstatus.setObjectName("lblstatus")
        self.lblRunning = QtWidgets.QLabel(CloakPassMain)
        self.lblRunning.setGeometry(QtCore.QRect(360, 50, 49, 16))
        self.lblRunning.setAlignment(QtCore.Qt.AlignCenter)
        self.lblRunning.setObjectName("lblRunning")
        self.lblListening = QtWidgets.QLabel(CloakPassMain)
        self.lblListening.setGeometry(QtCore.QRect(360, 70, 54, 16))
        self.lblListening.setAlignment(QtCore.Qt.AlignCenter)
        self.lblListening.setObjectName("lblListening")
        self.lblPassLen.setBuddy(self.sBPassLen)
        self.lblSalt.setBuddy(self.leSalt)
        self.lblKey.setBuddy(self.leKey)
        self.lblPW.setBuddy(self.lePass)

        self.retranslateUi(CloakPassMain)
        self.pBStart.clicked.connect(CloakPassMain.StartListener)
        self.pBStop.clicked.connect(CloakPassMain.StopListener)
        self.pBApply.clicked.connect(CloakPassMain.ApplySettings)
        self.btnMinimize.clicked.connect(CloakPassMain.Minimize)
        self.btnExit.clicked.connect(CloakPassMain.ExitGui)
        CloakPassMain.finished['int'].connect(self.btnExit.click)
        QtCore.QMetaObject.connectSlotsByName(CloakPassMain)
        CloakPassMain.setTabOrder(self.leSalt, self.leKey)
        CloakPassMain.setTabOrder(self.leKey, self.cbSpcChar)
        CloakPassMain.setTabOrder(self.cbSpcChar, self.cbNums)
        CloakPassMain.setTabOrder(self.cbNums, self.cbCaps)
        CloakPassMain.setTabOrder(self.cbCaps, self.sBPassLen)
        CloakPassMain.setTabOrder(self.sBPassLen, self.rBNoShow)
        CloakPassMain.setTabOrder(self.rBNoShow, self.rBShowPass)
        CloakPassMain.setTabOrder(self.rBShowPass, self.rBShowStars)
        CloakPassMain.setTabOrder(self.rBShowStars, self.pBApply)
        CloakPassMain.setTabOrder(self.pBApply, self.pBStart)
        CloakPassMain.setTabOrder(self.pBStart, self.pBStop)
        CloakPassMain.setTabOrder(self.pBStop, self.lePass)

    def retranslateUi(self, CloakPassMain):
        """Set Language created by QtDesigner."""
        _translate = QtCore.QCoreApplication.translate
        CloakPassMain.setWindowTitle(_translate("CloakPassMain", "CloakPass"))
        CloakPassMain.setToolTip(_translate("CloakPassMain",
                                            "<html><head/><body><p>"
                                            + "<br/></p></body></html>"))
        CloakPassMain.setWhatsThis(_translate("CloakPassMain",
                                              "CloakPass"))
        self.lblTitle.setText(_translate("CloakPassMain", "CloakPass v4.0.001_py"))
        self.groupBox.setTitle(_translate("CloakPassMain", "Password Options"))
        self.cbSpcChar.setText(_translate("CloakPassMain", "Special Characters"))
        self.cbNums.setText(_translate("CloakPassMain", "Numbers"))
        self.cbCaps.setText(_translate("CloakPassMain", "Capitals"))
        self.lblPassLen.setText(_translate("CloakPassMain", "Password Length"))
        self.gBPassStar.setTitle(_translate("CloakPassMain", "Visibility"))
        self.rBNoShow.setText(_translate("CloakPassMain", "Invisible"))
        self.rBShowPass.setText(_translate("CloakPassMain", "Show Pasword"))
        self.rBShowStars.setText(_translate("CloakPassMain", "Show Stars"))
        self.pBApply.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Apply password settings</p></body></html>"))
        self.pBApply.setText(_translate("CloakPassMain", "Apply"))
        self.pBStart.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Start CloakPass and begin listening for hot keys<br/>cntl-alt-p and cntl-alt-e</p></body></html>"))
        self.pBStart.setText(_translate("CloakPassMain", "Start"))
        self.pBStop.setText(_translate("CloakPassMain", "Stop"))
        self.btnMinimize.setText(_translate("CloakPassMain", "Minimize"))
        self.btnExit.setText(_translate("CloakPassMain", "Exit"))
        self.lblSalt.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p>A salt is a starting point for the hash function.<br/>It is mixed with the key and the password to create<br/>your unique hash.</p></body></html>"))
        self.lblSalt.setText(_translate("CloakPassMain", "Enter Salt:"))
        self.leSalt.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Enter a long ugly starting point for the hash.<br/>This should always be the same for this installation<br/>of cloakpass so that your software is unique.<br/>It can be changed inside the python code.</p></body></html>"))
        self.leSalt.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p><br/></p></body></html>"))
        self.lblKey.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p>A key is something memorable for you<br/>that is mixed with the salt and password to create the hash</p></body></html>"))
        self.lblKey.setText(_translate("CloakPassMain", "Enter Key:"))
        self.leKey.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>The Key should be something easy to remember that you enter<br/>each time you start the program</p></body></html>"))
        self.leKey.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p><br/></p></body></html>"))
        self.lblPW.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p>This is an area to test your passwords</p></body></html>"))
        self.lblPW.setText(_translate("CloakPassMain", "Password"))
        self.lePass.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>This is where you can test your password or<br/>create passwords that you can save somewhere else.<br/></p></body></html>"))
        self.lePass.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p><br/></p></body></html>"))
        self.lblIcon.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Copyright 1994 MtxDev.com <br/>Thanks to Dave Vogel.<br/></p></body></html>"))
        self.lblIcon.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p>I\'m, a wizard hidden in a cloak<br/>And my super power is a C</p><p>I\'m an old piece of clip art<br/>from the 80\'s </p></body></html>"))
        self.lblInstructions.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Instructions for entering password:<br/>Press cntl-alt-p to begin password<br/>Press enter or tab to finish<br/>Press esc to stop entering a password<br/>Press cntl-alt-e to quit the program</p></body></html>", "Activation Instructions"))
        self.lblInstructions.setText(_translate("CloakPassMain", "Cntl-Alt-P to start   Cntl-Alt-E to end  esc to stop"))
        self.lblstatus.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Running means the hot keys<br/>cntl-alt-p and cntl-alt-e<br/>are running:<br/>Listening means that<br/>cloakpass is listening for<br/>your password</p></body></html>"))
        self.lblstatus.setWhatsThis(_translate("CloakPassMain", "<html><head/><body><p>it\'s a status</p></body></html>"))
        self.lblstatus.setText(_translate("CloakPassMain", "Status"))
        self.lblRunning.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Running means the hot keys<br/>cntl-alt-p and cntl-alt-e<br/>are running:<br/>Listening means that<br/>cloakpass is listening for<br/>your password</p></body></html>"))
        self.lblRunning.setText(_translate("CloakPassMain", "Running"))
        self.lblListening.setToolTip(_translate("CloakPassMain", "<html><head/><body><p>Running means the hot keys<br/>cntl-alt-p and cntl-alt-e<br/>are running:<br/>Listening means that<br/>cloakpass is listening for<br/>your password</p></body></html>"))
        self.lblListening.setText(_translate("CloakPassMain", "Listening"))
# End of QtDesigner UI definitions

# Start of CloakPass Class included from cloakpass.py and overloaded for the
# UI process


class CloakPass():
    """MtxDev's password hasher.

    Listen for cntl alt p then collect characters
    upon an enter or tab then hash them.
    Following an enter or tab replace
    them with the hashed string and reset to
    listen for the next Crtl alt p.
    """

    sMyVer = "CloakPass PyQt_2.05b"
    # needed for sha512 Hash functions
    import hashlib
    from collections import OrderedDict
    import base64
    mybase64 = base64
    myOrderedDict = OrderedDict
    # used for main message loop
    import time
    mysleep = time.sleep
    mytime = time
    # used for keyboard control of application
    # from pynput import keyboard
    # used for readability convience everything is in keyboard
    from pynput.keyboard import Key, Listener, Controller, GlobalHotKeys
    #  myKey = ""  # Key
    lisKeys = ""  # Listener
    myController = ""  # Controller
    # myGlobalHotKeys = "" # GlobalHotKeys
    lisHotKey = ""  # Place holder will be assigned in a method
    lstHotKeys = ""  # Place holder will be assigned in a method

    # Password Settings
    # Three items make up the hash.  A Salt, a Key and Password
    # The Salt is something you own
    # The Key is something you are
    # The Password is something you know
    sSalt = "saltyMess$$TT3%$#%$#OY&T@#^ER^%RYGED"
    sKey = "SomethingYouCanRemember"
    iPassLen = 12
    bSpcChars = True
    bCaps = True
    bNums = True
    PassWord = ""  # Holds the password prior to hashing
    HashedPassWord = ""  # Holds the result of the hash temporaraly

    # System Settings
    fDefaultLoopDelay = 2  # This is default sleep delay for the message looper
    fLoopDelay = 2  # This is the sleep delay for the message loop looper
    iDebugLevel = 0  # debug level 1-5 for which messages you want to see
    bShowPass = False  # Do we type the password for the user or hide it
    bShowStars = False  # Do we type stars for the user or hide letter count
    sHotKeyP = '<ctrl>+<alt>+p'  # Hotkey for starting the password session
    sHotKeyI = '<ctrl>+<alt>+e'  # Hotkey for shutting down CloakPass

    # Flags
    bHotKeyP = False  # flag to control the start of the listener
    bHotKeyI = False  # flag to control shutdown of the app
    bInPass = False  # used to start capturing keys for password
    bStopLooper = False  # sets flag to stop the message loop
    bPauseListener = False  # prevents looping in listener callbacks
    bListening = False  # Keeps track of whether keylistener is running
    bSendOutput = False  # flag for looper to send final output

    # keywords
    _Suppress_ = True  # Used to flag the suppression of all keyboard events
    _NoSuppress_ = False  # Used to flag no suppression of all keyboard events
    _Start_ = True  # Used for the Listeners bStartStop
    _Stop_ = False  # Used for the Listeners bStartStop

    # Renamed to _init_ because __init__ has been overloaded.
    def __init__(self, sSalt: str = sSalt,
                 sKey: str = sKey,
                 iPassLen: int = 12,
                 bSpcChars: bool = True,
                 bCaps: bool = True,
                 bNums: bool = True,
                 bShowPass: bool = False,
                 bShowStars: bool = False,
                 bShowVer: bool = False,
                 ) -> None:
        if bShowVer is True:
            print(self.sMyVer)
        self.sSalt = sSalt
        self.sKey = sKey
        self.iPassLen = iPassLen
        self.bSpcChars = bSpcChars
        self.bCaps = bCaps
        self.bNums = bNums
        self.bShowPass = bShowPass
        self.bShowStars = bShowStars
        if bShowStars is True:
            self.bShowPass = False
        self.myController = self.Controller()

    def main(self) -> None:
        """Initialize and start Listener."""
        self.debug(1, "starting", "Main")
        self.HotKeyListener(self._Start_)
        self.threading.Thread(target=self.looper,
                              args=(str(self.fDefaultLoopDelay))).start()

    def SendOutput(self):
        """Send the password and backspaces if flag is set.

        This is necessary becasue the keyboard thread does not shut down
        immediately.  So you have to loop till it does.  Once shut down
        then you can echo keystrokes.
        """
        if self.bSendOutput is True:
            if self.bListening is False:  # don't send if listener is running
                if ((self.bShowPass is True) or
                        (self.bShowStars is True)):
                    # send bkspces when pwd is shown
                    self.debug(2, "sending backspaces", "SendingOutput")
                    self.Send_backspaces(len(self.PassWord)+1)
                    self.PassWord = ""
                self.Send_HashedPassword(self.HashedPassWord)
                self.debug(2, "Sending output:"
                           + self.HashedPassWord, "SendingOutput")
                self.bSendOutput = False
                # change the loop delay here instead of at the keylistener exit
                # because otherwise there will be a delay upon sending
                # backspaces
                self.fLoopDelay = self.fDefaultLoopDelay
            else:
                self.KeyListener(self._Stop_)

    def CheckFlags(self, bPress: bool, key) -> None:
        """Set Crtl alt p flags etc.

        this is run on every key down and key release
        bPress is true for press event
        bPress is false for release event
        """
        if bPress is True:
            if self.bInPass is True and (
                    key == self.Key.enter or key == self.Key.tab
            ):
                self.bInPass = False
                self.debug(2, "passwd:" + self.PassWord, "CheckFlags")
                self.debug(2, "sSalt:" + self.sSalt, "CheckFlags")
                self.debug(2, "sKey:" + self.sKey, "CheckFlags")
                sHP = self.HashPass(self.PassWord,
                                    self.sSalt,
                                    self.sKey)
                self.HashedPassWord = sHP
                self.fLoopDelay = .05
                self.bSendOutput = True
                return True
            elif self.bInPass is True:
                self.PassWord = self.PassWord + str(self.get_char(key))
                self.Send_Key(key)
                return True
        else:
            if key == self.Key.esc:
                self.debug(1, "esc pressed", "CheckFlags")
                # Copied from Send output.  Exit listener cleanly
                self.bSendOutput = False
                self.fLoopDelay = self.fDefaultLoopDelay
                self.KeyListener(self._Stop_)

                # Redundant, but Listener thread will stop if we return false
                return True
            elif self.bHotKeyP is True:
                self.bHotKeyP = False
                self.bInPass = True
                self.PassWord = ""
                return True

    def Hex2Binary(self, sHexNum: str, iDigits: int = 8) -> str:
        """Convert hexadecimal to a string of binary zero padded."""
        return str(bin(int(sHexNum, 16)))[2:].zfill(iDigits)

    def ApplyPasswordRules(self, sInput: str) -> str:
        """Change hashed binary input into password string.

        Input is in 1's and 0's ie 101101100
        first change to binary array then map to ascii characters
        according to the global flags set.
        It is implemented in the negative.  If you don't have
        bNums set true then this excludes them.
        It does not guarantee their inclusion.
        """
        self.debug(2, "sInput=" + sInput, "ApplyPasswordRules")
        iBin = int(sInput, 2)
        ByteNum = iBin.bit_length() + 7 // 8
        binary_array = iBin.to_bytes(ByteNum, "big", signed=False)
        sString = ""
        sOrig = ""
        for i in binary_array:
            iVal = int(i)
            if iVal > 127:
                iVal -= 127  # make sure it's ok for ascii
            if iVal < 32:
                iVal += 32  # only make printable characters
            if iVal > 1:  # zeros are just padding get rid of them
                sOrig += chr(iVal)
                if self.bSpcChars is False:
                    if iVal < 48:
                        iVal = (48 + (48 - iVal))
                    if (iVal > 57 and iVal < 65):
                        iVal = 65 + (65-iVal)
                    if (iVal > 90 and iVal < 97):
                        iVal = (97 + (iVal - 90))
                    if (iVal > 122):
                        iVal = (97 + (iVal - 122))
                if self.bNums is False:
                    if iVal > 47 and iVal < 58:
                        iVal = (65+(iVal-47))
                sChr = chr(iVal)
                if self.bCaps is False:
                    sChr = sChr.lower()
                sString += sChr
                self.debug(2, "sString=" + sString, "ApplyPasswordRules")
        return sString

    def HashPass(self, sInput: str, sSalt: str, sKey: str) -> str:
        """Hash a password using 3 items irreversibly."""
        sHP = ""
        sHashPass = sSalt + sInput + sKey
        self.debug(2, "sHashPass=" + sHashPass, "HashPass")
        # make a cryptographic hash from the string to make it unrecognizable
        hashthing = self.hashlib.sha512()
        hashthing.update(bytes(sHashPass, 'ascii'))
        hxSha512 = hashthing.hexdigest()
        binVal = self.Hex2Binary(hxSha512)
        sHashedString = self.ApplyPasswordRules(binVal)
        # remove Dupes
        sNoDupes = "".join(self.OrderedDict.fromkeys(sHashedString))
        # Limit the string size based upon the max length specified.
        if self.iPassLen >= len(sNoDupes):
            self.iPassLen = len(sNoDupes)
        # remove data to make reversing impossible
        sHP = sNoDupes[0:self.iPassLen]
        self.debug(2, "sHP=" + sHP, "HashPass")
        return sHP

    def Send_Key(self, key):
        """Send one key to the controller."""
        self.bPauseListener = True
        if self.bShowPass is True:
            self.myController.type(self.get_char(key))
        elif self.bShowStars is True:
            self.myController.type("*")
        self.debug(3, self.get_char(key), "Send_Key")
        self.bPauseListener = False

    def Send_HashedPassword(self, sHashedPass: str = 'NONE') -> None:
        """After backspaces send hashed string to keyboard controller."""
        self.bPauseListener = True
        self.myController.type(sHashedPass)
        self.bPauseListener = False

    def Send_backspaces(self, iCount: int) -> None:
        """Send iCount backspaces to keyboard controller."""
        self.bPauseListener = True
        for x in range(0, iCount):
            self.myController.tap(self.Key.backspace)
        self.bPauseListener = False

    def get_char(self, key):
        """Translate key to character or string."""
        try:
            # you can end up with a key.char that is NoneType
            # so plan for that and replace the displayed character
            # with an underscore
            if (key.char is None):
                return "?"
            else:
                return key.char
        except AttributeError:
            return "~"

    def on_press(self, key) -> None:
        """Process keyboard key down callback."""
        if self.bPauseListener is True:
            return True
        else:
            return self.CheckFlags(True, key)

    def on_release(self, key) -> bool:
        """Process keyboard key up callback."""
        if self.bPauseListener is True:
            return True
        else:
            return self.CheckFlags(False, key)

    def KeyListener(self, bStartStop: bool = True,
                    bSuppress: bool = False) -> None:
        """Key Listener setup and startup controls callback for keyboard.

        call: sCmd="start" or sCmd="stop" bSuppress is True of Fallse
        """
        if (bStartStop is True):
            if self.bListening is False:  # Only start if it's not running
                self.lisKeys = self.Listener(
                    suppress=bSuppress,
                    on_release=self.on_release,
                    on_press=self.on_press
                )
                self.lisKeys.daemon = True
                self.lisKeys.start()
                self.bListening = True
                self.fLoopDelay = .05
                self.debug(3, "Listener Started", "KeyListener")
        else:
            if self.bListening is True:  # only stop if it's running
                self.lisKeys.stop()
                self.bListening = False
                self.debug(3, "Listener Stopping", "KeyListener")
                # self.fLoopDelay = self.fDefaultLoopDelay
                # I know this seems to make sense but it will delay
                # sending of keystrokes after completion.
                # it is moved to the sendoutput function instead.

    def on_activate_p(self) -> None:
        """Hot key p has been pressed set flags."""
        self.bHotKeyP = True
        self.KeyListener(self._Start_, self._Suppress_)

    def on_activate_e(self) -> None:
        """Hot key i has been pressed set flags."""
        self.shutdown()

    def HotKeyListener(self, bStartStop: bool = True) -> None:
        """Hotkey Listner setup and startup controls callback for keyboard.

        call: bStartStop is true for starting false for stopping
        """
        if (bStartStop is True):
            self.lstHotKeys = {self.sHotKeyP: self.on_activate_p,
                               self.sHotKeyI: self.on_activate_e}
            self.lisHotKey = self.GlobalHotKeys(self.lstHotKeys)
            self.lisHotKey.daemon = True
            self.lisHotKey.start()
            self.debug(1, "Listener Started", "HotKeyListener")
        else:
            self.lisHotKey.stop()
            self.debug(3, "Listener Stopped", "HotKeyListener")
            return False

    def looper(self, sStatus: str) -> None:
        """Message loop to run as a daemon.  Use a thread to call."""
        i = int(sStatus)
        self.fLoopDelay = i
        while True:
            i = self.fLoopDelay  # allows other processes to alter the sleep
            self.mysleep(i)
            ts = str(self.mytime.time())
            self.debug(4, ts, "looper")
            if self.bStopLooper is True:
                break
                return False
            elif (self.bSendOutput is True):
                self.SendOutput()

    def setStatus(self):
        """Set the status on the GUI to track listening."""
        if self.bListening is True:
            self.lblListening.setVisible(True)
        else:
            self.lblListening.setVisible(False)

    def shutdown(self) -> None:
        """Shutdown cleanly allowing the looper & listener threads to stop."""
        self.debug(1, "Shutting Down", "shutdown")
        self.KeyListener(self._Stop_)
        self.HotKeyListener(self._Stop_)
        self.debug(3, "Setting Looper Shutdown flag", "shutdown")
        self.bStopLooper = True

    def debug(self, iLevel: int = 0,
              sDebug: str = "Nothing to Say",
              sLocation: str = "Unknown"):
        """Print a string and location of the call for debugging.

        Takes debug level, the string and the name of the calling function
        """
        if iLevel <= self.iDebugLevel:
            print("\nCP: Loc=" + sLocation + " Str=" + sDebug)


class CloakGUI(Ui_CloakPassMain, QtWidgets.QDialog, CloakPass):
    def __init__(self, parent=None):
        """Overload the original init for the GUI environ."""
        super().__init__(parent)
        self.setupUi(self)
        self.retranslateUi(self)
        # don't init the cloakpass portion of the class till after the
        # gui is loaded
        self.leKey.setText(self.sKey)
        self.leSalt.setText(self.sSalt)
        self.sBPassLen.setValue(self.iPassLen)
        self.cbCaps.setChecked(self.bCaps)
        self.cbNums.setChecked(self.bNums)
        self.cbSpcChar.setChecked(self.bSpcChars)
        self.rBShowPass.setChecked(self.bShowPass)
        self.rBShowStars.setChecked(self.bShowStars)
        self.rBNoShow.setChecked(~(self.bShowPass and self.bShowStars))
        self.lblTitle.setText(self.sMyVer)
        if self.bShowStars is True:
            self.bShowPass = False
        self.myController = self.Controller()
        self.pBStart.setEnabled(False)

    def connectSignalsSlots(self):
        """Attach buttons to code"""
        self.pBStart.clicked.connect(self.StartListener)
        self.pBStop.clicked.connect(self.StopListener)
        self.pBApply.clicked.connect(self.ApplySettings)
        self.btnMinimize.clicked.connect(self.Minimize)
        self.btnExit.clicked.connect(self.ExitGui)

    def StartListener(self):
        """Start on the listener and update the GUI."""
        self.HotKeyListener(True)
        self.pBStart.setEnabled(False)
        self.pBStop.setEnabled(True)
        self.lblRunning.setVisible(True)

    def StopListener(self):
        """Stop the listener and update the GUI."""
        self.HotKeyListener(False)
        self.pBStart.setEnabled(True)
        self.pBStop.setEnabled(False)
        self.lblRunning.setVisible(False)

    def ApplySettings(self):
        """Set Flags according to the GUI settings."""
        self.sKey = self.leKey.text()
        self.sSalt = self.leSalt.text()
        self.iPassLen = self.sBPassLen.value()
        self.bCaps = bool(self.cbCaps.checkState())
        self.bNums = bool(self.cbNums.checkState())
        self.bSpcChars = bool(self.cbSpcChar.checkState())
        self.bShowPass = bool(self.rBShowPass.isChecked())
        self.bShowStars = bool(self.rBShowStars.isChecked())

    def Minimize(self):
        """Minimize to the task bar in the future."""
        self.showMinimized()

    def ExitGui(self):
        """Message the looper thread to stop and close the GUI."""
        # required to stop the looper thread
        self.bStopLooper = True
        app.quit()

    def main(self, myApp):
        """Overloaded main from cloakpass specifically for the GUI."""
        self.ApplySettings()
        self.app = myApp
        # This starts the message loop in it's own thread
        # overloaded from cloakpass main
        self.HotKeyListener(self._Start_)
        threading.Thread(target=self.looper,
                         args=(str(self.fDefaultLoopDelay))).start()

    def looper(self, sStatus: str) -> None:
        """Message loop to run as a daemon. Should be started on a thread."""
        i = int(sStatus)
        self.fLoopDelay = i
        while True:
            i = self.fLoopDelay  # allows other processes to alter the sleep
            self.mysleep(i)
            ts = str(self.mytime.time())
            self.debug(4, ts, "looper")
            if self.bStopLooper is True:
                break
                return False
            elif (self.bSendOutput is True):
                self.SendOutput()
            # overloaded looper for putting status on the GUI
            self.setStatus()


if __name__ == '__main__':
    """Main portion to execute class."""

    # Imported from CloakPass_rc.py resource file
    qt_version = QtCore.qVersion().split('.')
    if qt_version < ['5', '8', '0']:
        rcc_version = 1
        qt_resource_struct = qt_resource_struct_v1
    else:
        rcc_version = 2
        qt_resource_struct = qt_resource_struct_v2

    def qInitResources():
        """Load Resources. created by QtDesigner."""
        QtCore.qRegisterResourceData(rcc_version,
                                     qt_resource_struct,
                                     qt_resource_name, qt_resource_data)

    def qCleanupResources():
        """Unload Resources. created by QtDesigner."""
        QtCore.qUnregisterResourceData(rcc_version,
                                       qt_resource_struct,
                                       qt_resource_name, qt_resource_data)
    qInitResources()

    # Now that resources are loaded start initializing the app.
    app = QApplication(sys.argv)
    cloakgui = CloakGUI()
    cloakgui.main(app)
    cloakgui.show()
    # sys.exit(app.exec())
    app.exec()
